"""
Django settings for myproject project.

Generated by 'django-admin startproject' using Django 2.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '329_jephd09x==)f!2tgt$00y6cq)mkh!e6$)mt@fp=+%%u8h='

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]


# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'myapp',
    'rest_framework',
    'rest_framework.authtoken',
    'django_extensions',
    'corsheaders',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'myproject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'myproject.wsgi.application'

CORS_ORIGIN_ALLOW_ALL = True

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'letsflashdb',
        'USER': 'root',
        'PORT': 3306,
        'HOST': 'letsflashdb.cgwirfhferkb.us-east-1.rds.amazonaws.com',
        'PASSWORD': 'serverindia#2019'
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]



REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    )
}





LOGGING = {
  'version': 1,
  'disable_existing_loggers': False,
  'filters': {
        'require_debug_false': {
           '()': 'django.utils.log.RequireDebugFalse'
       },
       'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
   },


  'handlers': {
      # Include the default Django email handler for errors
      # This is what you'd get without configuring logging at all.
      'mail_admins': {
          'class': 'django.utils.log.AdminEmailHandler',
          'level': 'ERROR',
          'filters': ['require_debug_false'],
           # But the emails are plain text by default - HTML is nicer
          'include_html': True,
      },
      # Log to a text file that can be rotated by logrotate
      'logfile': {
          'class': 'logging.handlers.WatchedFileHandler',
          'filename': BASE_DIR+'/django-error.log'
      },
  },
  'loggers': {
      # Again, default Django configuration to email unhandled exceptions
      'django.request': {
          'handlers': ['mail_admins'],
          'level': 'ERROR',
          'propagate': False,
      },
      # Might as well log any errors anywhere else in Django
      'django': {
          'handlers': ['logfile'],
          'level': 'ERROR',
          'propagate': True,
      },
      'django.db.backends': {
            'handlers': ['logfile'],
            'level': 'ERROR',
            'propagate': False,
        },
      # Your own app - this assumes all your logger names start with "myapp."
      'myapp': {
          'handlers': ['logfile'],
          'level': 'ERROR', # Or maybe INFO or WARNING
          'propagate': True
      },
  },
  # 'Optimization': {
  #     'handlers': ['file'],
  #     'level': 'DEBUG',
  #     'propagate': False,
  # },
}



# REST_FRAMEWORK = {
#     # Use Django's standard `django.contrib.auth` permissions,
#     # or allow read-only access for unauthenticated users.
#     'DEFAULT_PERMISSION_CLASSES': [
#         'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
#     ]
# }
# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Email configuration
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_HOST_USER = 'itsmepython21@gmail.com'
EMAIL_HOST_PASSWORD = 'hidgptqclxmznnvp'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, "static")

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, "media")
API_SERVER = 'http://35.168.134.93/'
